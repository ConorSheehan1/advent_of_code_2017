class grid:
    def __init__(self, size):
        self.grid = [[]]

    def add_top_row(self):
        top_row = []
        for i in range(self.height):
            self.num+=1
            top_row.append(self.num)

        # add the top row (in reverse)
        self.grid.insert(0, top_row[::-1])

    def add_bottom_row(self):
        bottom_row = []
        for i in range(self.height):
            self.num+=1
            bottom_row.append(self.num)

        self.grid.append(bottom_row)

    def __repr__(self):
        print("num={}, height={}".format(self.num, self.height))
        for row in self.gird:
            print(row)

    def is_square(self):
        row_size = len(self.grid[0])
        for row in self.grid:
            if len(row) != row_size:
                return False
        # if the grid is empty, return false, otherwise true
        return len(self.grid) > 0 


def clean_data(data):
    return data

def is_square(data):
    row_size = len(data[0])
    for row in data:
        if len(row) != row_size:
            return False
    return True

def print_grid(grid, num, height):
    print("num={}, height={}".format(num, height))
    for row in grid:
        print(row)

def generate_grid(size):
    num, height = 1, 0
    grid = [[1]]
    # always make a square grid
    while num < size:
        print_grid(grid, num, height)

        num += 1
        # if grid is square, add next number to the right of the current bottom right number
        if is_square(grid):
            # height grows by 2 each spiral
            height += 2
            grid[-1].append(num)

            # then fill the new right hand column, don't take into account bottom and top row
            for i in range(1, height-2):
                num += 1
                grid[-i].append(num)

        top_row = []
        for i in range(height):
            num+=1
            top_row.append(num)
        print("top row", top_row)

        # add the top row (in reverse)
        grid.insert(0, top_row[::-1])

        # fill the left column
        for i in range(height):
            num += 1
            grid[i].insert(0, num)

        # add the bottom row
        bottom_row = []
        for i in range(height+1):
            num+=1
            bottom_row.append(num)
        print("bottom row", bottom_row)

        grid.append(bottom_row)
        print_grid(grid, num, height)
    return grid

if __name__ == "__main__":
    generate_grid(int(input()))
